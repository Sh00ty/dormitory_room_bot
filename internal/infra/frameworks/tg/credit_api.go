package tg

import (
	"context"
	"errors"
	"fmt"
	"math"
	"strconv"
	"strings"

	localerrors "github.com/Sh00ty/dormitory_room_bot/internal/local_errors"
	"github.com/Sh00ty/dormitory_room_bot/internal/logger"
	metrics "github.com/Sh00ty/dormitory_room_bot/internal/metrics"
	"github.com/Sh00ty/dormitory_room_bot/pkg/entities"
	valueObjects "github.com/Sh00ty/dormitory_room_bot/pkg/value_objects"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –≤ —Ç–∞—Å–∫ –º—ç–Ω—ç–¥–∂–µ—Ä–µ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ –¥–æ–±–≤–∞–≤–∏—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º –¥–æ–ª–≥–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ–ª—å–∑—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É
// –ê–Ω–¥—Ä–µ–π –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —ç—Ç—É —Ñ–Ω –¥–ª—è –º–Ω–æ–≥–∏—Ö
func Owe(ctx context.Context, tgMessage *tgbotapi.Message) tgbotapi.MessageConfig {

	buyer := entities.User{
		ID:        valueObjects.UserID("@" + tgMessage.From.UserName),
		ChannelID: valueObjects.ChannelID(tgMessage.Chat.ID),
	}

	args := tgMessage.CommandArguments()

	payers, credit, err := oweParser(args)
	if err != nil {
		// –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ, –Ω–æ –ª—É—á—à–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ
		return tgbotapi.NewMessage(tgMessage.Chat.ID, err.Error())
	}
	if len(payers) == 0 {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –¥–æ–ª–∂–Ω–∏–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
	}
	if credit == 0 {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –≥–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ –Ω—É–ª–µ–≤–∞—è")
	}
	credit = int64(math.Ceil(float64(credit) / float64(len(payers))))

	err = bot.debitSvc.CreditTransaction(ctx, buyer.ChannelID, buyer.ID, payers, valueObjects.Money(credit))
	if err != nil {
		if errors.As(err, &localerrors.UpdateCreditError{}) {
			updateErr := err.(localerrors.UpdateCreditError)
			if errors.Is(updateErr.Err, localerrors.ErrDoesntExist) {
				return tgbotapi.NewMessage(tgMessage.Chat.ID,
					fmt.Sprintf("‚ùå %s –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
			}
			return tgbotapi.NewMessage(tgMessage.Chat.ID, fmt.Sprintf("‚ùå –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç %s\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
		}
	}

	resMsg := fmt.Sprintf("[%s]\n", strings.Repeat("+", len(payers)))
	for _, payer := range payers {
		resMsg += fmt.Sprintf("%s –¥–æ–ª–∂–µ–Ω @%s -> %d\n", payer, tgMessage.From.UserName, credit)
	}
	resMsg += "‚úÖ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"

	metrics.TotalCreditsCommands.WithLabelValues("/credit").Add(1)
	metrics.TotalCredidSum.WithLabelValues(strconv.FormatInt(int64(buyer.ChannelID), 10)).Add(float64(credit))
	return tgbotapi.NewMessage(tgMessage.Chat.ID, resMsg)
}

func Checkout(ctx context.Context, tgMessage *tgbotapi.Message) tgbotapi.MessageConfig {

	channelID := valueObjects.ChannelID(tgMessage.Chat.ID)

	credits, err := bot.debitSvc.GetAll(ctx, channelID)
	if err != nil {
		logger.Errorf("Checkout: %v", err)
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
	}
	if len(credits) == 0 {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤")
	}
	transactions := bot.debitReolver.ResolveCredits(credits)

	msg := "‚úÖ DUE TO GOLD STEP ALGO:\n"

	if len(transactions) == 0 {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
	}

	for _, tx := range transactions {
		msg += fmt.Sprintf("\n%s –¥–æ–ª–∂–µ–Ω %s %d —Ä—É–±–ª–µ–π", tx.From, tx.To, tx.Amount)
	}

	err = bot.debitSvc.ClearBalances(ctx, channelID)
	if err != nil {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	metrics.TotalCreditsCommands.WithLabelValues("/checkout").Add(1)
	return tgbotapi.NewMessage(tgMessage.Chat.ID, msg+"\n‚úÖ —è –ø–æ—á–∏—Å—Ç–∏–ª –±–∞–ª–∞–Ω—Å—ã")
}

func GetResults(ctx context.Context, tgMessage *tgbotapi.Message) tgbotapi.MessageConfig {

	channelID := valueObjects.ChannelID(tgMessage.Chat.ID)

	credits, err := bot.debitSvc.GetAll(ctx, channelID)
	if err != nil {
		logger.Errorf("GetResults: %v", err)
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	if len(credits) == 0 {
		return tgbotapi.NewMessage(tgMessage.Chat.ID, "‚ùå –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
	}
	msg := "üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã</b>:"

	for i, Credit := range credits {
		msg += fmt.Sprintf("\n%d. %s ---> %d‚ÇΩ", i, Credit.UserID[1:], Credit.Credit)
	}

	metrics.TotalCreditsCommands.WithLabelValues("/bank").Add(1)
	return tgbotapi.NewMessage(tgMessage.Chat.ID, msg)
}

package tasks

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gitlab.com/Sh00ty/dormitory_room_bot/internal/domain/tasks"
	"gitlab.com/Sh00ty/dormitory_room_bot/internal/entities"
	localerrors "gitlab.com/Sh00ty/dormitory_room_bot/internal/local_errors"
	valueObjects "gitlab.com/Sh00ty/dormitory_room_bot/internal/value_objects"
	"gitlab.com/Sh00ty/dormitory_room_bot/pkg/logger"
	scheduler "gitlab.com/Sh00ty/dormitory_room_bot/pkg/scheduler"
	"gitlab.com/Sh00ty/dormitory_room_bot/pkg/tgproc"
)

type tgbot struct {
	taskManager tasks.TaskManager
	sender      tgproc.MessageSender
}

func NewTgbot(tm tasks.TaskManager, s tgproc.MessageSender) *tgbot {
	return &tgbot{taskManager: tm, sender: s}
}

func (bot tgbot) Subscribe(ctx context.Context, query *tgbotapi.CallbackQuery) []tgbotapi.MessageConfig {
	taskID := valueObjects.TaskID(query.Data)
	channelID := query.Message.Chat.ID

	err := bot.taskManager.Subscribe(ctx, valueObjects.TaskID(taskID), valueObjects.ChannelID(channelID), "@"+valueObjects.UserID(query.From.UserName))
	if err != nil {
		switch {
		case errors.Is(err, localerrors.ErrDoesntExist):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∏ —Å id %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", taskID))
		case errors.Is(err, localerrors.ErrNotSubTask):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∞ —Å %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏", taskID))
		case errors.Is(err, localerrors.ErrAlreadyExists):
			return tgproc.MakeMessage(channelID, "‚ùå —Ç—ã —É–∂–µ –ø–æ–¥—Å–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á–∫—É")
		}
		logger.Errorf("Subscribe: %v", err)
		return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É")
	}
	taskString := fmt.Sprintf("‚úÖ %s –ø–æ–¥–ø–∏—Å–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á—É %s", query.From.UserName, taskID)
	return tgproc.MakeMessage(channelID, taskString)
}

func (bot tgbot) UnSubscribe(ctx context.Context, query *tgbotapi.CallbackQuery) []tgbotapi.MessageConfig {
	taskID := valueObjects.TaskID(query.Data)
	channelID := query.Message.Chat.ID

	err := bot.taskManager.UnSubscribe(ctx, valueObjects.TaskID(taskID), valueObjects.ChannelID(channelID), "@"+valueObjects.UserID(query.From.UserName))
	if err != nil {
		switch {
		case errors.Is(err, localerrors.ErrDoesntExist):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∏ —Å id %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", taskID))
		case errors.Is(err, localerrors.ErrNotSubTask):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∞ —Å %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏", taskID))
		case errors.Is(err, localerrors.ErrDidntSubscribed):
			return tgproc.MakeMessage(channelID, "‚ùå —Ç—ã –∂ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª—Å—è –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á–∫—É")
		case errors.Is(err, localerrors.ErrNoWorkers):
			return tgproc.MakeMessage(channelID, "‚ùå –≤–æ–æ–±—â–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ")
		}
		logger.Errorf("Subscribe: %v", err)
		return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∑–∞–¥–∞—á–∏")
	}
	taskString := fmt.Sprintf("‚úÖ %s –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∑–∞–¥–∞—á–∏ %s", query.From.UserName, taskID)
	return tgproc.MakeMessage(channelID, taskString)
}

func (bot tgbot) CreateOneShotTask(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {
	return bot.createTask(ctx, tgMessage, entities.OneShot)
}

func (bot tgbot) CreateSubsTask(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {
	return bot.createTask(ctx, tgMessage, entities.Subscribed)
}

func (bot tgbot) CreateDefaultTask(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {
	return bot.createTask(ctx, tgMessage, entities.Default)
}

func (bot tgbot) GetTask(ctx context.Context, query *tgbotapi.CallbackQuery) []tgbotapi.MessageConfig {
	taskID := valueObjects.TaskID(query.Data)
	channelID := query.Message.Chat.ID

	task, err := bot.taskManager.Get(ctx, valueObjects.TaskID(taskID), valueObjects.ChannelID(channelID))
	if err != nil {
		if errors.Is(err, localerrors.ErrDoesntExist) {
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∏ —Å id <i>%s</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", taskID))
		}
		logger.Errorf("GetTask: %v", err)
		return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
	}

	taskString := GetTaskString(ctx, task)
	taskString += fmt.Sprintf("\n\nüôç –ø–æ–∫–∞–∑–∞–Ω–∞ by <i>%s</i>", query.From.UserName)
	return tgproc.MakeMessage(channelID, taskString)
}

func (bot tgbot) DeleteTask(ctx context.Context, query *tgbotapi.CallbackQuery) []tgbotapi.MessageConfig {
	taskID := valueObjects.TaskID(query.Data)
	channelID := query.Message.Chat.ID

	err := bot.taskManager.Delete(ctx, taskID, valueObjects.ChannelID(channelID))
	if err != nil {
		if errors.Is(err, localerrors.ErrDoesntExist) {
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∏ —Å id <i>%s</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", taskID))
		}
		logger.Errorf("DeleteTask: %v", err)
		return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
	}

	return tgproc.MakeMessage(channelID, fmt.Sprintf("üóëÔ∏è –∑–∞–¥–∞—á–∞ <i>%s</i> —É–¥–∞–ª–µ–Ω–∞ by <i>%s</i>", taskID, query.From.UserName))
}

func (bot tgbot) ChangeWorker(ctx context.Context, query *tgbotapi.CallbackQuery) []tgbotapi.MessageConfig {
	taskID := valueObjects.TaskID(query.Data)
	channelID := query.Message.Chat.ID

	task, err := bot.taskManager.UpdateWorkers(ctx, valueObjects.TaskID(taskID), valueObjects.ChannelID(channelID))
	if err != nil {
		switch {
		case errors.Is(err, localerrors.ErrDoesntExist):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –∑–∞–¥–∞—á–∏ <i>%s</i> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", taskID))
		case errors.Is(err, localerrors.ErrNoWorkers):
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå —É –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ <i>%s</i> –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–∞–º–æ–Ω", taskID))
		default:
			logger.Errorf("ChangeWorker: %v", err)
			return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")

		}
	}

	workers := task.Workers.GetWorkers()

	resMsg := "‚úÖ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞:"
	for _, w := range workers {
		resMsg += fmt.Sprintf("\n - %s", w)
	}
	resMsg += fmt.Sprintf("\n\n–ø–æ –ø—Ä–æ—Å—å–±–µ %s", query.From.UserName)
	return tgproc.MakeMessage(channelID, resMsg)
}

func (bot tgbot) GetAllTasks(ctx context.Context, tgMessage *tgbotapi.Message) (result []tgbotapi.MessageConfig) {

	channelID := valueObjects.ChannelID(tgMessage.Chat.ID)
	tasks, err := bot.taskManager.GetAll(ctx, channelID)
	if err != nil {
		if errors.Is(err, localerrors.ErrDoesntExist) {
			return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é")
		}
		logger.Errorf("GetAllTasks: %v", err)
		return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–∞–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
	}
	rows := make([][]tgbotapi.InlineKeyboardButton, 0, len(tasks))
	for _, task := range tasks {
		gbutton := tgbotapi.NewInlineKeyboardButtonData(string(task.ID), "get_t:"+string(task.ID))
		dbutton := tgbotapi.NewInlineKeyboardButtonData("üóë", "del_t:"+string(task.ID))
		row := tgbotapi.NewInlineKeyboardRow(gbutton, dbutton)
		_, err := task.Getworkers()
		if task.IsSubscribed() {
			sbutton := tgbotapi.NewInlineKeyboardButtonData("üîî", "subt:"+string(task.ID))
			row = append(row, sbutton)
			if err == nil {
				ubutton := tgbotapi.NewInlineKeyboardButtonData("üîï", "unsubt:"+string(task.ID))
				row = append(row, ubutton)
			}
		}

		if err == nil {
			cbutton := tgbotapi.NewInlineKeyboardButtonData("üîÅ", "change_w:"+string(task.ID))
			row = append(row, cbutton)
		}
		rows = append(rows, row)
	}
	tmpRes := tgbotapi.NewMessage(tgMessage.Chat.ID, "<b>–í–∞—à–∏ –∑–∞–¥–∞—á–∫–∏</b> üôäüôäüôä:")
	tmpRes.ParseMode = tgbotapi.ModeHTML
	tmpRes.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	result = append(result, tmpRes)
	return
}

func (bot tgbot) createTask(ctx context.Context, tgMessage *tgbotapi.Message, typ entities.TaskType) []tgbotapi.MessageConfig {
	taskID, title, workers, workerCount, notifyInterval, notifyTime := taskParser(tgMessage)
	if taskID == "" {
		switch typ {
		case entities.Default:
			return tgproc.MakeMessage(tgMessage.Chat.ID, "–ø—Ä–∏–º–µ—Ä:\n/task t_id @w1 @w2 @w3 2 24h 05-11-2022+21:27 desc")
		case entities.OneShot:
			return tgproc.MakeMessage(tgMessage.Chat.ID, "–ø—Ä–∏–º–µ—Ä:\n/moment t_id @w1 @w2 @w3 2 24h 05-11-2022+21:27 desc")
		case entities.Subscribed:
			return tgproc.MakeMessage(tgMessage.Chat.ID, "–ø—Ä–∏–º–µ—Ä:\n/subt t_id @w1 @w2 @w3 2 24h 05-11-2022+21:27 desc")
		}
	}

	options := ""

	if len(workers) == 0 {
		options += "\n‚ùå –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"
	} else {
		options += fmt.Sprintf("\n‚úÖ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ <b>%d</b> –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", len(workers))
	}

	if typ == entities.Subscribed {
		workerCount = uint32(len(workers))
	}

	isNotified := false
	if notifyInterval == nil {
		options += "\n‚ùå –ø–æ–≤—Ç–æ—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	} else {
		isNotified = true
		options += fmt.Sprintf("\n‚è± –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %s", notifyInterval.String())
	}

	if notifyTime == nil {
		options += "\n‚ùå —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	} else {
		isNotified = true
		options += fmt.Sprintf("\n‚è± –¥–∞—Ç–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %s", notifyTime.Add(3*time.Hour).Format("02-01-2022+18:47"))
	}

	if !isNotified && typ == entities.OneShot {
		momentErr := "\n‚ùå–ú–æ–º–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ"
		return tgproc.MakeMessage(tgMessage.Chat.ID, momentErr)
	}
	err := bot.taskManager.Create(ctx, taskID, typ, title, tgMessage.From.UserName, workers, workerCount, notifyInterval, notifyTime, valueObjects.ChannelID(tgMessage.Chat.ID))
	if err != nil {
		if errors.Is(err, localerrors.ErrAlreadyExists) {
			return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –∑–∞–¥–∞—á–∞ —Å –¥–∞–Ω–Ω—ã–º <i>id</i> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		}
		logger.Errorf("CreateTask: %v", err)
		return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
	}
	return tgproc.MakeMessage(tgMessage.Chat.ID, fmt.Sprintf("‚úÖ <i>–ó–∞–¥–∞—á–∞:</i>  <b>%s</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n%s", taskID, options))
}

func GetTaskString(ctx context.Context, task entities.Task) string {
	msg := fmt.Sprintf("üìú <i>–ó–∞–¥–∞—á–∞:</i>  <b>%s</b>\n", task.ID)

	workers, err := task.Getworkers()
	if err == nil && len(workers) != 0 {
		msg += "üë® <i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</i> "
		for _, w := range workers {
			msg += "\n       - " + string(w)
		}
	}
	if task.Title != "" {
		msg += fmt.Sprintf("\nüìå <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i>\n       %s", task.Title)
	}
	return msg
}

func (bot tgbot) GetNotifications(interval time.Duration) func() {
	ctx := context.Background()

	s := scheduler.NewTimeSheduller()
	closer := s.Start(interval, func() error {

		tasks, channelIDs, err := bot.taskManager.NotificationCheck(ctx)
		if err != nil {
			return err
		}
		type taskWIthChannel struct {
			channelID valueObjects.ChannelID
			taskID    valueObjects.TaskID
		}
		tasksToDelete := make([]taskWIthChannel, 0, len(tasks))
		for i, task := range tasks {
			result := GetTaskString(ctx, task)
			if task.IsOneShot() {
				tasksToDelete = append(tasksToDelete, taskWIthChannel{channelIDs[i], task.ID})
			}
			msg := tgbotapi.NewMessage(int64(channelIDs[i]), result)
			msg.ParseMode = tgbotapi.ModeHTML
			_, err = bot.sender.Send(msg)
			if err != nil {
				logger.Error(err.Error())
			}
		}

		for _, task := range tasksToDelete {
			err = bot.taskManager.Delete(ctx, task.taskID, task.channelID)
			if err != nil {
				// TODO: make some notification in channel, but not at this tread
				// put in rabbitmq (when it will be created sender service)
				logger.Errorf("can't delete one shot task : %w", err)
			}
		}
		return err
	})
	return closer
}

type parseStage int

const (
	taskIDStage parseStage = iota
	workersStage
	workerCountStage
	notifyIntervalStage
	notifyTimeStage
	titleStage
)

func taskParser(tgMessage *tgbotapi.Message) (taskID valueObjects.TaskID,
	title string,
	workers []valueObjects.UserID,
	workerCount uint32,
	notifyInterval *time.Duration,
	notifyTime *time.Time) {

	var (
		exists   bool
		curStage = taskIDStage
		after    = tgMessage.CommandArguments() + " "
		before   = ""
		iscut    = true
	)

Loop:
	for {
		if iscut {
			before, after, exists = strings.Cut(after, " ")

			if !exists || before == "" {
				return
			}
		}

		switch curStage {
		case taskIDStage:
			taskID = valueObjects.TaskID(before)
			curStage++
		case workersStage:
			if before[:1] != "@" {
				curStage++
				iscut = false
				continue Loop
			}
			workers = append(workers, valueObjects.UserID(before))
		case workerCountStage:
			tmp, err := strconv.ParseUint(before, 10, 64)
			curStage++
			iscut = err == nil
			if err == nil {
				workerCount = uint32(tmp)
			}
		case notifyIntervalStage:
			tmp, err := time.ParseDuration(before)
			curStage++
			iscut = err == nil
			if err == nil {
				notifyInterval = &tmp
			}
		case notifyTimeStage:

			// day-mounth-year+hour:minute
			t, err := time.ParseInLocation("02-01-2006+15:04", before, time.Local)
			iscut = err == nil
			curStage++
			if err == nil {
				// –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å—é
				t = t.Add(-3 * time.Hour)
				notifyTime = &t
			}
		case titleStage:
			title = before + " " + after
			return
		default:
			return
		}

	}
}

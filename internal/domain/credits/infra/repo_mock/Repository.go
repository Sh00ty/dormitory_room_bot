// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "gitlab.com/Sh00ty/dormitory_room_bot/internal/entities"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	value_objects "gitlab.com/Sh00ty/dormitory_room_bot/internal/value_objects"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Atomic provides a mock function with given fields: ctx, action
func (_m *Repository) Atomic(ctx context.Context, action func(context.Context) error) error {
	ret := _m.Called(ctx, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, Credit
func (_m *Repository) Create(ctx context.Context, Credit *entities.Credit) error {
	ret := _m.Called(ctx, Credit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Credit) error); ok {
		r0 = rf(ctx, Credit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, channelID, userID
func (_m *Repository) Delete(ctx context.Context, channelID value_objects.ChannelID, userID value_objects.UserID) error {
	ret := _m.Called(ctx, channelID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, value_objects.ChannelID, value_objects.UserID) error); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, channelID, userID
func (_m *Repository) Get(ctx context.Context, channelID value_objects.ChannelID, userID value_objects.UserID) (entities.Credit, error) {
	ret := _m.Called(ctx, channelID, userID)

	var r0 entities.Credit
	if rf, ok := ret.Get(0).(func(context.Context, value_objects.ChannelID, value_objects.UserID) entities.Credit); ok {
		r0 = rf(ctx, channelID, userID)
	} else {
		r0 = ret.Get(0).(entities.Credit)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, value_objects.ChannelID, value_objects.UserID) error); ok {
		r1 = rf(ctx, channelID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, channelID
func (_m *Repository) GetAll(ctx context.Context, channelID value_objects.ChannelID) ([]entities.Credit, error) {
	ret := _m.Called(ctx, channelID)

	var r0 []entities.Credit
	if rf, ok := ret.Get(0).(func(context.Context, value_objects.ChannelID) []entities.Credit); ok {
		r0 = rf(ctx, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Credit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, value_objects.ChannelID) error); ok {
		r1 = rf(ctx, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, Credit
func (_m *Repository) Update(ctx context.Context, Credit entities.Credit) error {
	ret := _m.Called(ctx, Credit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Credit) error); ok {
		r0 = rf(ctx, Credit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

package credit

import (
	"context"
	"errors"
	"fmt"
	"math"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gitlab.com/Sh00ty/dormitory_room_bot/internal/domain/credits"
	"gitlab.com/Sh00ty/dormitory_room_bot/internal/entities"
	localerrors "gitlab.com/Sh00ty/dormitory_room_bot/internal/local_errors"
	metrics "gitlab.com/Sh00ty/dormitory_room_bot/internal/metrics"
	valueObjects "gitlab.com/Sh00ty/dormitory_room_bot/internal/value_objects"
	"gitlab.com/Sh00ty/dormitory_room_bot/pkg/calculator"
	"gitlab.com/Sh00ty/dormitory_room_bot/pkg/logger"
	"gitlab.com/Sh00ty/dormitory_room_bot/pkg/tgproc"
)

type tgbot struct {
	creditManager credits.CreditManager
	oweCalc       calculator.Calculator
}

func New(u credits.CreditManager) *tgbot {
	return &tgbot{u, calculator.New()}
}

var (
	// —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–∞–∫–∏–µ –ø–ª—ç–π—Å—Ö–æ–ª–¥–µ—Ä—ã
	selfCreditPlaceholders = []valueObjects.UserID{"@me", "@i", "@—è"}
)

func (bot tgbot) Owe(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {
	channelID := tgMessage.Chat.ID
	buyer := entities.User{
		ID:        valueObjects.UserID("@" + tgMessage.From.UserName),
		ChannelID: valueObjects.ChannelID(channelID),
	}

	args := tgMessage.CommandArguments()

	payers, credit, err := bot.oweParser(args)
	if err != nil {
		// –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ, –Ω–æ –ª—É—á—à–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ
		return tgproc.MakeMessage(channelID, err.Error())
	}
	if len(payers) == 0 {
		return tgproc.MakeMessage(channelID, "‚ùå –¥–æ–ª–∂–Ω–∏–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
	}
	if credit == 0 {
		return tgproc.MakeMessage(channelID, "‚ùå –≥–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ –Ω—É–ª–µ–≤–∞—è")
	}

	for i, payer := range payers {
		for _, placeholder := range selfCreditPlaceholders {
			if payer == placeholder {
				payers[i] = buyer.ID
			}
		}
	}

	credit = int64(math.Ceil(float64(credit) / float64(len(payers))))

	if err = bot.creditManager.CreditTransaction(ctx, buyer.ChannelID, buyer.ID, payers, valueObjects.Money(credit)); err != nil {
		if errors.As(err, &localerrors.UpdateCreditError{}) {
			updateErr := err.(localerrors.UpdateCreditError)
			if errors.Is(updateErr.Err, localerrors.ErrDoesntExist) {
				return tgproc.MakeMessage(channelID,
					fmt.Sprintf("‚ùå %s –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
			}
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç %s\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
		}
	}

	resMsg := ""
	for _, payer := range payers {
		if credit > 0 {
			resMsg += fmt.Sprintf("%s –¥–æ–ª–∂–µ–Ω @%s -> %d\n", payer, tgMessage.From.UserName, credit)
		} else {
			// —Ä–∞–∑–≤–∞—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å
			resMsg += fmt.Sprintf("@%s –¥–æ–ª–∂–µ–Ω %s -> %d\n", tgMessage.From.UserName, payer, -credit)
		}
	}
	resMsg += "‚úÖ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"

	metrics.TotalCreditsCommands.WithLabelValues("/credit").Add(1)
	metrics.TotalCredidSum.WithLabelValues(strconv.FormatInt(channelID, 10)).Add(float64(credit))
	return tgproc.MakeMessage(channelID, resMsg)
}

type parseStage int

const (
	creditorStage parseStage = iota
	creditStage
	calculatorStage
)

func (bot tgbot) oweParser(args string) (users []valueObjects.UserID, credit int64, err error) {

	args = strings.ReplaceAll(args, "  ", " ")

	var (
		exists bool
		iscut  = true
		after  = args + " "
		before = ""

		curStage = creditorStage
	)

	for {
		if iscut {
			before, after, exists = strings.Cut(after, " ")

			if !exists || before == "" {
				return
			}
		}

		switch curStage {
		case creditorStage:
			if before[:1] != "@" {
				curStage++
				iscut = false
				continue
			}
			users = append(users, valueObjects.UserID(before))
		case creditStage:
			if strings.HasPrefix(before, "{") {
				curStage++
				iscut = false
				continue
			}
			credit, err = strconv.ParseInt(before, 10, 64)
			if err != nil {
				return nil, 0, fmt.Errorf("‚ùå –±—Ä–æ %s - —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, —É–¥–∞–ª–∏ —Ç–µ–ª–µ–≥—É –ø–∂", before)
			}
			return
		case calculatorStage:
			tokens, err := parseCalc(before + after)
			if err != nil {
				logger.Errorf("oweParser : %s", err.Error())
				return nil, 0, err
			}
			if len(tokens) == 0 {
				return nil, 0, fmt.Errorf("‚ùå c –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ–Ω–æ –±—É–¥—Ç–æ –±—ã –ø—É—Å—Ç–æ–µ –¥–ª—è –º–µ–Ω—è")
			}
			credit, err = bot.oweCalc.Calculate(tokens)
			if err != nil {
				logger.Errorf("oweParser : %s", err.Error())
				switch {
				case errors.Is(err, calculator.ErrInvalidBrackets):
					return nil, 0, fmt.Errorf("‚ùå –Ω–µ –º–æ–≥—É –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ, –Ω–∞—à–µ–ª –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –Ω–µ –Ω–∞—à–µ–ª")
				case errors.Is(err, calculator.ErrZeroDivision):
					return nil, 0, fmt.Errorf("‚ùå –∫–∞–∫ –∂–µ —è –æ—Å—É–∂–¥–∞—é –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å, –Ω–µ –±—É–¥—É —ç—Ç–æ —Å—á–∏—Ç–∞—Ç—å")
				case errors.Is(err, calculator.ErrInvalidExpr):
					return nil, 0, fmt.Errorf("‚ùå —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –¥–ª—è –º–µ–Ω—è")
				default:
					return nil, 0, fmt.Errorf("‚ùå —Ö–∑ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —è —ç—Ç–æ –Ω–µ —Å–º–æ–≥—É")
				}
			}
			return users, credit, nil
		default:
			return
		}
	}
}

func parseCalc(args string) ([]calculator.Token, error) {
	tokens := make([]calculator.Token, 0, 5)
	num := int64(0)
	isNum := false
	logger.Infof("oweArgs : %s", args)
loop:
	for _, char := range args {
		if char == ' ' {
			if isNum {
				tokens = append(tokens, calculator.GetNumberToken(num))
				num = 0
				isNum = false
			}
			continue
		}
		if char <= '9' && char >= '0' {
			num = num*10 + int64(char-48)
			isNum = true
			continue
		}

		if isNum {
			tokens = append(tokens, calculator.GetNumberToken(num))
			num = 0
			isNum = false
		}
		switch char {
		case '{':
			continue
		case '}':
			break loop
		default:
			token, err := calculator.GetTokenByRune(char)
			if err != nil {
				return nil, fmt.Errorf("‚ùå —á—Ç–æ-—Ç–æ —è –Ω–µ –º–æ–≥—É —ç—Ç–æ –¥–µ–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –º–µ—à–∞–µ—Ç - \"%s\"", string(char))
			}
			tokens = append(tokens, token)
			continue
		}
	}
	return tokens, nil
}

func (bot tgbot) Checkout(ctx context.Context, tgMessage *tgbotapi.Message) (res []tgbotapi.MessageConfig) {
	channelID := tgMessage.Chat.ID

	transactions, err := bot.creditManager.Checkout(ctx, valueObjects.ChannelID(channelID))
	if err != nil {
		switch {
		case errors.Is(err, localerrors.ErrDoesntExist):
			return tgproc.MakeMessage(channelID, "‚ùå —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		default:
			return tgproc.MakeMessage(channelID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
		}
	}
	if len(transactions) == 0 {
		return tgproc.MakeMessage(channelID, "ü¶• –≤—Å–µ –ø—É—Å—Ç–æ, –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–∞—Å")
	}
	msg := "‚úÖ DUE TO GOLD STEPOS ALGO:\nüï∫–Ø –û–ë–ß–ò–°–¢–ò–õ –í–ê–®–ò –ë–ê–õ–ê–ù–°–´üï∫"
	var prevSender valueObjects.UserID
	for _, tx := range transactions {
		if prevSender != tx.From {
			smsg := tgbotapi.NewMessage(channelID, msg)
			smsg.ParseMode = tgbotapi.ModeHTML
			res = append(res, smsg)
			msg = ""
			prevSender = tx.From
		}
		msg += fmt.Sprintf("<b>%s</b> –¥–æ–ª–∂–µ–Ω <b>%s</b> %d‚ÇΩ\n", tx.From, tx.To, tx.Amount)
	}
	smsg := tgbotapi.NewMessage(channelID, msg)
	smsg.ParseMode = tgbotapi.ModeHTML
	res = append(res, smsg)
	metrics.TotalCreditsCommands.WithLabelValues("/checkout").Add(1)
	return res
}

func (bot tgbot) GetResults(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {

	channelID := valueObjects.ChannelID(tgMessage.Chat.ID)

	credits, err := bot.creditManager.GetAll(ctx, channelID)
	if err != nil {
		logger.Errorf("GetResults: %v", err)
		return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	if len(credits) == 0 {
		return tgproc.MakeMessage(tgMessage.Chat.ID, "‚ùå –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
	}
	msg := "üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã</b>:"

	for i, Credit := range credits {
		msg += fmt.Sprintf("\n%d. %s ---> %d‚ÇΩ", i, Credit.UserID[1:], Credit.Credit)
	}
	metrics.TotalCreditsCommands.WithLabelValues("/bank").Add(1)
	return tgproc.MakeMessage(tgMessage.Chat.ID, msg)
}

func (bot tgbot) OweCancel(ctx context.Context, tgMessage *tgbotapi.Message) []tgbotapi.MessageConfig {
	channelID := tgMessage.Chat.ID
	if tgMessage.ReplyToMessage == nil {
		return tgproc.MakeMessage(channelID, "‚ùå —Å–Ω–∞—á–∞–ª–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /credit –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å")
	}
	if tgMessage.ReplyToMessage.Command() != "credit" {
		logger.Info(tgMessage.Command())
		return tgproc.MakeMessage(channelID, "‚ùå –Ω–∞–¥–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å /credit, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–ª–≥")
	}
	if tgMessage.From.UserName != tgMessage.ReplyToMessage.From.UserName {
		return tgproc.MakeMessage(channelID, "‚ùå –¥–∞–≤–∞–π —Ç—ã –±—É–¥–µ—à—å –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–æ–ª–≥–∏, –∞ —Ç–æ –∑–∞–ø–∞—Ö–Ω–µ—Ç —Å–∫–∞–º–æ–º")
	}

	buyer := entities.User{
		ID:        valueObjects.UserID("@" + tgMessage.From.UserName),
		ChannelID: valueObjects.ChannelID(tgMessage.Chat.ID),
	}

	args := tgMessage.ReplyToMessage.CommandArguments()

	payers, credit, err := bot.oweParser(args)
	if err != nil {
		// –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ –æ—à–∏–±–∫–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ, –Ω–æ –ª—É—á—à–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ
		return tgproc.MakeMessage(channelID, err.Error())
	}
	if len(payers) == 0 {
		return tgproc.MakeMessage(channelID, "‚ùå –∫–∞–∫ —Ç–∞–∫ —Ç–æ, —è –Ω–µ —Å–º–æ–≥ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —É —ç—Ç–æ–≥–æ –¥–µ–ª–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤")
	}
	if credit == 0 {
		return tgproc.MakeMessage(channelID, "‚ùå –∫–∞–º–æ–Ω, —Ç—ã –∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —è –Ω–µ –º–æ–≥ –∑–∞—á–µ—Å—Ç—å –Ω—É–ª–µ–≤–æ–π –¥–æ–ª–≥")
	}

	for i, payer := range payers {
		for _, placeholder := range selfCreditPlaceholders {
			if payer == placeholder {
				payers[i] = buyer.ID
			}
		}
	}

	credit = -int64(math.Ceil(float64(credit) / float64(len(payers))))

	if err = bot.creditManager.CreditTransaction(ctx, valueObjects.ChannelID(channelID), buyer.ID, payers, valueObjects.Money(credit)); err != nil {
		if errors.As(err, &localerrors.UpdateCreditError{}) {
			updateErr := err.(localerrors.UpdateCreditError)
			if errors.Is(updateErr.Err, localerrors.ErrDoesntExist) {
				return tgproc.MakeMessage(channelID,
					fmt.Sprintf("‚ùå –∫–∞–∫ %s –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–º\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
			}
			return tgproc.MakeMessage(channelID, fmt.Sprintf("‚ùå –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç %s\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞", updateErr.User))
		}
	}
	return tgproc.MakeMessage(channelID, "‚úÖ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —è –æ—Ç–º–µ–Ω–∏–ª –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ–±–æ—é –¥–æ–ª–≥, –º–æ–∂–µ—à—å –≥–æ—Ä–¥–∏—Ç—å—Å—è –º–Ω–æ–π")
}
